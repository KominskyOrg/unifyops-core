FROM python:3.12-slim AS builder

# Set build arguments
ARG BUILD_TIMESTAMP
ARG TERRAFORM_VERSION=1.11.0

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    unzip \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir --prefix=/install -r requirements.txt

# Install Terraform
RUN curl -fsSL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o terraform.zip \
    && unzip terraform.zip \
    && mkdir -p /install/bin \
    && mv terraform /install/bin/ \
    && rm terraform.zip

# Production image
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    ENVIRONMENT=production \
    LOG_LEVEL=warning \
    BUILD_TIMESTAMP=${BUILD_TIMESTAMP} \
    PATH="/usr/local/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy built artifacts from builder stage
COPY --from=builder /install /usr/local

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy application code
COPY app/ /app/app/
COPY alembic/ /app/alembic/
COPY alembic.ini /app/
COPY requirements.txt /app/
COPY scripts/initialize_db.py /app/scripts/

# Create a non-root user and switch to it
RUN addgroup --system app && adduser --system --group app \
    && chown -R app:app /app \
    && chmod +x /app/scripts/initialize_db.py
USER app

# Limit permissions further
RUN chmod -R 550 /app

# Expose the port the app runs on
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Run the application in production mode with database initialization
CMD ["sh", "-c", "echo 'Running database initialization...' && python /app/scripts/initialize_db.py --direct && echo 'Starting production server...' && SKIP_MIGRATIONS=true uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4"] 