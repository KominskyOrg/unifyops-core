name: Deploy UnifyOps Core to ECS

on:
  push:
    branches:
      - main
    paths:
      - "app/**"
      - "Dockerfile"
      - "requirements.txt"
      - ".env.*"
      - "scripts/**"
      - "tf/**"
      - ".github/workflows/deploy_ecs.yml"
  pull_request:
    types:
      - closed
    branches:
      - main
    paths:
      - "app/**"
      - "Dockerfile"
      - "requirements.txt"
      - ".env.*"
      - "scripts/**"
      - "tf/**"
      - ".github/workflows/deploy_ecs.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME || format('{0}-{1}-{2}-repo', github.event.inputs.environment || 'dev', 'unifyops', 'api') }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET || format('{0}-tfstate-bucket', 'unifyops') }}
  TF_STATE_LOCK_TABLE: ${{ secrets.TF_STATE_LOCK_TABLE || format('{0}-tfstate-lock', 'unifyops') }}
  TF_DIR: ./tf

jobs:
  test:
    name: Test API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: make install

      - name: Run tests
        run: make ci-test

      - name: Run linting
        id: lint
        run: make ci-lint
        continue-on-error: true

      - name: Linting Summary
        if: steps.lint.outcome == 'failure'
        run: |
          echo "::warning::Linting checks failed. Code will be deployed but consider fixing these issues."

  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "env=dev" >> $GITHUB_OUTPUT
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Set variables for Makefile
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          # Ensure Docker is set to use Linux containers with AMD64 architecture
          docker context inspect

          # Build the base image first - make sure we use a local tag
          docker build --platform=linux/amd64 -t unifyops-core-base:latest -f docker/Dockerfile.base .

          # Build the environment-specific container - use this base image
          docker build --platform=linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG \
            -f docker/Dockerfile.${{ env.ENV }} \
            --build-arg BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            .

          # Save the image tag to use it in Terraform
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Push container to ECR
        run: make ci-ecr-push

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Initialize Terraform with our tf-init target
      - name: Terraform Init
        run: make tf-init

      # Create a Terraform variables file with our deployment variables
      - name: Create Terraform Variables File
        working-directory: ${{ env.TF_DIR }}
        run: |
          cat > terraform.tfvars <<EOF
          infra_env = "${{ env.ENV }}"
          container_image_tag = "${{ env.IMAGE_TAG }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          EOF

      # Plan Terraform changes
      - name: Terraform Plan
        run: make tf-plan

      # Apply Terraform changes
      - name: Terraform Apply
        run: make tf-apply
